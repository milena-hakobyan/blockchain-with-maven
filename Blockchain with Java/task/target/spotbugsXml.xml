<?xml version="1.0" encoding="utf-8"?>
<BugCollection sequence='0' release='' analysisTimestamp='1745929615939' version='4.9.3' timestamp='1745929610612'><Project projectName='your-project-name'><Jar>/Users/mhakobyan/IdeaProjects/Blockchain with Java copy/Blockchain with Java/task/target/classes</Jar><SrcDir>/Users/mhakobyan/IdeaProjects/Blockchain with Java copy/Blockchain with Java/task/src/main/java</SrcDir><WrkDir>/Users/mhakobyan/IdeaProjects/Blockchain with Java copy/Blockchain with Java/task/target</WrkDir></Project><BugInstance instanceOccurrenceNum='0' instanceHash='238febea912e32724dfb092a95a1f634' rank='14' abbrev='AT' category='MT_CORRECTNESS' priority='2' type='AT_NONATOMIC_64BIT_PRIMITIVE' instanceOccurrenceMax='0'><ShortMessage>This write of this 64-bit primitive variable may not atomic</ShortMessage><LongMessage>This write of the 64-bit primitive variable "generationTime" may not atomic</LongMessage><Class classname='blockchain.Block' primary='true'><SourceLine classname='blockchain.Block' start='17' end='97' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>At Block.java:[lines 17-97]</Message></SourceLine><Message>In class blockchain.Block</Message></Class><Method isStatic='false' classname='blockchain.Block' signature='()Ljava/lang/String;' name='generateHashCode' primary='true'><SourceLine endBytecode='334' classname='blockchain.Block' start='50' end='72' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='0'></SourceLine><Message>In method blockchain.Block.generateHashCode()</Message></Method><Field isStatic='false' classname='blockchain.Block' signature='D' name='generationTime' primary='true'><SourceLine classname='blockchain.Block' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>In Block.java</Message></SourceLine><Message>Field blockchain.Block.generationTime</Message></Field><SourceLine endBytecode='55' classname='blockchain.Block' start='56' end='56' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='55' primary='true'><Message>At Block.java:[line 56]</Message></SourceLine><SourceLine role='SOURCE_LINE_ANOTHER_INSTANCE' endBytecode='142' classname='blockchain.Block' start='70' end='70' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='142'><Message>Another occurrence at Block.java:[line 70]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='2ab8d4c906241a8ffce994cb9e3d68c0' rank='14' abbrev='AT' category='MT_CORRECTNESS' priority='2' type='AT_NONATOMIC_OPERATIONS_ON_SHARED_VARIABLE' instanceOccurrenceMax='0'><ShortMessage>Operation on shared variable is not atomic</ShortMessage><LongMessage>Operation on the "magic" shared variable in "Block" class is not atomic</LongMessage><Class classname='blockchain.Block' primary='true'><SourceLine classname='blockchain.Block' start='17' end='97' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>At Block.java:[lines 17-97]</Message></SourceLine><Message>In class blockchain.Block</Message></Class><Method isStatic='false' classname='blockchain.Block' signature='()Ljava/lang/String;' name='generateHashCode' primary='true'><SourceLine endBytecode='334' classname='blockchain.Block' start='50' end='72' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='0'></SourceLine><Message>In method blockchain.Block.generateHashCode()</Message></Method><Field isStatic='false' classname='blockchain.Block' signature='I' name='magic' primary='true'><SourceLine classname='blockchain.Block' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>In Block.java</Message></SourceLine><Message>Field blockchain.Block.magic</Message></Field><SourceLine endBytecode='121' classname='blockchain.Block' start='66' end='66' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='121' primary='true'><Message>At Block.java:[line 66]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ec93e86899cc6c96425c62421069c5f7' rank='14' abbrev='AT' category='MT_CORRECTNESS' priority='2' type='AT_STALE_THREAD_WRITE_OF_PRIMITIVE' instanceOccurrenceMax='0'><ShortMessage>This write of this shared primitive variable may not be visible to other threads</ShortMessage><LongMessage>Shared primitive variable "id" in one thread may not yield the value of the most recent write from another thread</LongMessage><Class classname='blockchain.Block' primary='true'><SourceLine classname='blockchain.Block' start='17' end='97' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>At Block.java:[lines 17-97]</Message></SourceLine><Message>In class blockchain.Block</Message></Class><Method isStatic='false' classname='blockchain.Block' signature='(I)V' name='setId' primary='true'><SourceLine endBytecode='57' classname='blockchain.Block' start='45' end='45' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='0'></SourceLine><Message>In method blockchain.Block.setId(int)</Message></Method><Field isStatic='false' classname='blockchain.Block' signature='I' name='id' primary='true'><SourceLine classname='blockchain.Block' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>In Block.java</Message></SourceLine><Message>Field blockchain.Block.id</Message></Field><SourceLine endBytecode='2' classname='blockchain.Block' start='45' end='45' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='2' primary='true'><Message>At Block.java:[line 45]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='d1391ce123576bad16dc95715e8f7cf' cweid='374' rank='18' abbrev='EI' category='MALICIOUS_CODE' priority='2' type='EI_EXPOSE_REP' instanceOccurrenceMax='0'><ShortMessage>May expose internal representation by returning reference to mutable object</ShortMessage><LongMessage>blockchain.Block.getMessages() may expose internal representation by returning Block.messages</LongMessage><Class classname='blockchain.Block' primary='true'><SourceLine classname='blockchain.Block' start='17' end='97' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>At Block.java:[lines 17-97]</Message></SourceLine><Message>In class blockchain.Block</Message></Class><Method isStatic='false' classname='blockchain.Block' signature='()Ljava/util/List;' name='getMessages' primary='true'><SourceLine endBytecode='46' classname='blockchain.Block' start='41' end='41' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='0'></SourceLine><Message>In method blockchain.Block.getMessages()</Message></Method><Field isStatic='false' classname='blockchain.Block' signature='Ljava/util/List;' name='messages' primary='true'><SourceLine classname='blockchain.Block' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>In Block.java</Message></SourceLine><Message>Field blockchain.Block.messages</Message></Field><SourceLine endBytecode='4' classname='blockchain.Block' start='41' end='41' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='4' primary='true'><Message>At Block.java:[line 41]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='71f9fad05cc5deb9e4eb613d87aa27bd' cweid='374' rank='18' abbrev='EI2' category='MALICIOUS_CODE' priority='2' type='EI_EXPOSE_REP2' instanceOccurrenceMax='0'><ShortMessage>May expose internal representation by incorporating reference to mutable object</ShortMessage><LongMessage>new blockchain.Block(String, int, int, List) may expose internal representation by storing an externally mutable object into Block.transactions</LongMessage><Class classname='blockchain.Block' primary='true'><SourceLine classname='blockchain.Block' start='17' end='97' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>At Block.java:[lines 17-97]</Message></SourceLine><Message>In class blockchain.Block</Message></Class><Method isStatic='false' classname='blockchain.Block' signature='(Ljava/lang/String;IILjava/util/List;)V' name='&lt;init&gt;' primary='true'><SourceLine endBytecode='203' classname='blockchain.Block' start='19' end='28' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='0'></SourceLine><Message>In method new blockchain.Block(String, int, int, List)</Message></Method><Field isStatic='false' classname='blockchain.Block' signature='Ljava/util/List;' name='transactions' primary='true'><SourceLine classname='blockchain.Block' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>In Block.java</Message></SourceLine><Message>Field blockchain.Block.transactions</Message></Field><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='52' name='transactions' register='4'><Message>Local variable named transactions</Message></LocalVariable><SourceLine endBytecode='52' classname='blockchain.Block' start='26' end='26' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='52' primary='true'><Message>At Block.java:[line 26]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='84a962ea73146e4540c78fa3473be037' cweid='476' rank='8' abbrev='NP' category='CORRECTNESS' priority='2' type='NP_UNWRITTEN_FIELD' instanceOccurrenceMax='0'><ShortMessage>Read of unwritten field</ShortMessage><LongMessage>Read of unwritten field messages in blockchain.Block.getMaxMessageId()</LongMessage><Class classname='blockchain.Block' primary='true'><SourceLine classname='blockchain.Block' start='17' end='97' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>At Block.java:[lines 17-97]</Message></SourceLine><Message>In class blockchain.Block</Message></Class><Method isStatic='false' classname='blockchain.Block' signature='()J' name='getMaxMessageId' primary='true'><SourceLine endBytecode='86' classname='blockchain.Block' start='76' end='76' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='0'></SourceLine><Message>In method blockchain.Block.getMaxMessageId()</Message></Method><Field isStatic='false' classname='blockchain.Block' signature='Ljava/util/List;' name='messages' primary='true'><SourceLine classname='blockchain.Block' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>In Block.java</Message></SourceLine><Message>Field blockchain.Block.messages</Message></Field><SourceLine endBytecode='4' classname='blockchain.Block' start='76' end='76' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='4' primary='true'><Message>At Block.java:[line 76]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ebec7d1960284aa0e90561fa3867a001' rank='12' abbrev='UwF' category='CORRECTNESS' priority='2' type='UWF_UNWRITTEN_FIELD' instanceOccurrenceMax='0'><ShortMessage>Unwritten field</ShortMessage><LongMessage>Unwritten field: blockchain.Block.messages</LongMessage><Class classname='blockchain.Block' primary='true'><SourceLine classname='blockchain.Block' start='17' end='97' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>At Block.java:[lines 17-97]</Message></SourceLine><Message>In class blockchain.Block</Message></Class><Field isStatic='false' classname='blockchain.Block' signature='Ljava/util/List;' name='messages' primary='true'><SourceLine classname='blockchain.Block' sourcepath='blockchain/Block.java' sourcefile='Block.java'><Message>In Block.java</Message></SourceLine><Message>Field blockchain.Block.messages</Message></Field><SourceLine endBytecode='1' classname='blockchain.Block' start='41' end='41' sourcepath='blockchain/Block.java' sourcefile='Block.java' startBytecode='1' primary='true'><Message>At Block.java:[line 41]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='14d38e12abf1b98c2e09eae7b989082c' cweid='374' rank='18' abbrev='EI' category='MALICIOUS_CODE' priority='2' type='EI_EXPOSE_REP' instanceOccurrenceMax='0'><ShortMessage>May expose internal representation by returning reference to mutable object</ShortMessage><LongMessage>blockchain.Blockchain.getPendingMessages() may expose internal representation by returning Blockchain.pendingMessages</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='false' classname='blockchain.Blockchain' signature='()Ljava/util/List;' name='getPendingMessages' primary='true'><SourceLine endBytecode='46' classname='blockchain.Blockchain' start='40' end='40' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method blockchain.Blockchain.getPendingMessages()</Message></Method><Field isStatic='false' classname='blockchain.Blockchain' signature='Ljava/util/List;' name='pendingMessages' primary='true'><SourceLine classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine><Message>Field blockchain.Blockchain.pendingMessages</Message></Field><SourceLine endBytecode='4' classname='blockchain.Blockchain' start='40' end='40' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='4' primary='true'><Message>At Blockchain.java:[line 40]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='1fc1f6dc26c5e69c6a044ce6cd0999c8' cweid='374' rank='18' abbrev='EI' category='MALICIOUS_CODE' priority='2' type='EI_EXPOSE_REP' instanceOccurrenceMax='0'><ShortMessage>May expose internal representation by returning reference to mutable object</ShortMessage><LongMessage>blockchain.Blockchain.getPendingTransactions() may expose internal representation by returning Blockchain.pendingTransactions</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='false' classname='blockchain.Blockchain' signature='()Ljava/util/List;' name='getPendingTransactions' primary='true'><SourceLine endBytecode='46' classname='blockchain.Blockchain' start='43' end='43' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method blockchain.Blockchain.getPendingTransactions()</Message></Method><Field isStatic='false' classname='blockchain.Blockchain' signature='Ljava/util/List;' name='pendingTransactions' primary='true'><SourceLine classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine><Message>Field blockchain.Blockchain.pendingTransactions</Message></Field><SourceLine endBytecode='4' classname='blockchain.Blockchain' start='43' end='43' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='4' primary='true'><Message>At Blockchain.java:[line 43]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='7219fbcc54c22e4095b614055850fc1e' cweid='366' rank='17' abbrev='IS' category='MT_CORRECTNESS' priority='2' type='IS2_INCONSISTENT_SYNC' instanceOccurrenceMax='0'><ShortMessage>Inconsistent synchronization</ShortMessage><LongMessage>Inconsistent synchronization of blockchain.Blockchain.N; locked 60% of time</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Field isStatic='false' classname='blockchain.Blockchain' signature='I' name='N' primary='true'><SourceLine classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine><Message>Field blockchain.Blockchain.N</Message></Field><Int role='INT_SYNC_PERCENT' value='60'><Message>Synchronized 60% of the time</Message></Int><SourceLine role='SOURCE_LINE_UNSYNC_ACCESS' endBytecode='22' classname='blockchain.Blockchain' start='126' end='126' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='22' primary='true'><Message>Unsynchronized access at Blockchain.java:[line 126]</Message></SourceLine><SourceLine role='SOURCE_LINE_UNSYNC_ACCESS' endBytecode='37' classname='blockchain.Blockchain' start='132' end='132' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='37'><Message>Unsynchronized access at Blockchain.java:[line 132]</Message></SourceLine><SourceLine role='SOURCE_LINE_UNSYNC_ACCESS' endBytecode='68' classname='blockchain.Blockchain' start='137' end='137' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='68'><Message>Unsynchronized access at Blockchain.java:[line 137]</Message></SourceLine><SourceLine role='SOURCE_LINE_UNSYNC_ACCESS' endBytecode='1' classname='blockchain.Blockchain' start='36' end='36' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='1'><Message>Unsynchronized access at Blockchain.java:[line 36]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='39' classname='blockchain.Blockchain' start='103' end='103' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='39'><Message>Synchronized access at Blockchain.java:[line 103]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='83' classname='blockchain.Blockchain' start='111' end='111' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='83'><Message>Synchronized access at Blockchain.java:[line 111]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='88' classname='blockchain.Blockchain' start='111' end='111' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='88'><Message>Synchronized access at Blockchain.java:[line 111]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='93' classname='blockchain.Blockchain' start='112' end='112' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='93'><Message>Synchronized access at Blockchain.java:[line 112]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='47' classname='blockchain.Blockchain' start='104' end='104' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='47'><Message>Synchronized access at Blockchain.java:[line 104]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='52' classname='blockchain.Blockchain' start='104' end='104' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='52'><Message>Synchronized access at Blockchain.java:[line 104]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f50396d45c91995f3f077ec2bc5572b3' cweid='543' rank='14' abbrev='LI' category='MT_CORRECTNESS' priority='2' type='LI_LAZY_INIT_STATIC' instanceOccurrenceMax='0'><ShortMessage>Incorrect lazy initialization of static field</ShortMessage><LongMessage>Incorrect lazy initialization of static field blockchain.Blockchain.INSTANCE in blockchain.Blockchain.getInstance()</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='true' classname='blockchain.Blockchain' signature='()Lblockchain/Blockchain;' name='getInstance' primary='true'><SourceLine endBytecode='7' classname='blockchain.Blockchain' start='30' end='33' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method blockchain.Blockchain.getInstance()</Message></Method><Field isStatic='true' role='FIELD_ON' classname='blockchain.Blockchain' signature='Lblockchain/Blockchain;' name='INSTANCE' primary='true'><SourceLine classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine><Message>On field blockchain.Blockchain.INSTANCE</Message></Field><SourceLine endBytecode='13' classname='blockchain.Blockchain' start='30' end='31' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0' primary='true'><Message>At Blockchain.java:[lines 30-31]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='b0b4bf97a6221840f915c80b10cc381b' cweid='493' rank='18' abbrev='MS' category='MALICIOUS_CODE' priority='2' type='MS_EXPOSE_REP' instanceOccurrenceMax='0'><ShortMessage>Public static method may expose internal representation by returning a mutable object or array</ShortMessage><LongMessage>Public static blockchain.Blockchain.getInstance() may expose internal representation by returning Blockchain.INSTANCE</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='true' classname='blockchain.Blockchain' signature='()Lblockchain/Blockchain;' name='getInstance' primary='true'><SourceLine endBytecode='60' classname='blockchain.Blockchain' start='30' end='33' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method blockchain.Blockchain.getInstance()</Message></Method><Field isStatic='true' classname='blockchain.Blockchain' signature='Lblockchain/Blockchain;' name='INSTANCE' primary='true'><SourceLine classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine><Message>Field blockchain.Blockchain.INSTANCE</Message></Field><SourceLine endBytecode='19' classname='blockchain.Blockchain' start='33' end='33' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='19' primary='true'><Message>At Blockchain.java:[line 33]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='fe744ba7879d5fced2251d5d7f5ea126' cweid='493' rank='18' abbrev='MS' category='MALICIOUS_CODE' priority='2' type='MS_PKGPROTECT' instanceOccurrenceMax='0'><ShortMessage>Field should be package protected</ShortMessage><LongMessage>blockchain.Blockchain.id should be package protected</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Field isStatic='true' classname='blockchain.Blockchain' signature='I' name='id' primary='true'><SourceLine classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine><Message>Field blockchain.Blockchain.id</Message></Field><SourceLine synthetic='true' classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='da095fbe6feb2508de45ccf92e3b63a5' rank='7' abbrev='SING' category='CORRECTNESS' priority='2' type='SING_SINGLETON_GETTER_NOT_SYNCHRONIZED' instanceOccurrenceMax='0'><ShortMessage>Instance-getter method of class using singleton design pattern is not synchronized.</ShortMessage><LongMessage>Instance-getter method of class using singleton design pattern (blockchain.Blockchain) is not synchronized.</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='true' classname='blockchain.Blockchain' signature='()Lblockchain/Blockchain;' name='getInstance' primary='true'><SourceLine endBytecode='60' classname='blockchain.Blockchain' start='30' end='33' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method blockchain.Blockchain.getInstance()</Message></Method><SourceLine synthetic='true' endBytecode='60' classname='blockchain.Blockchain' start='30' end='33' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'><Message>At Blockchain.java:[lines 30-33]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='fbfe4ad57f0ae8593f4b8cf56e10f31' rank='7' abbrev='SING' category='CORRECTNESS' priority='2' type='SING_SINGLETON_HAS_NONPRIVATE_CONSTRUCTOR' instanceOccurrenceMax='0'><ShortMessage>Class using singleton design pattern has non-private constructor.</ShortMessage><LongMessage>Class (blockchain.Blockchain) using singleton design pattern has non-private constructor.</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='false' classname='blockchain.Blockchain' signature='()V' name='&lt;init&gt;' primary='true'><SourceLine endBytecode='136' classname='blockchain.Blockchain' start='19' end='27' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method new blockchain.Blockchain()</Message></Method><SourceLine synthetic='true' endBytecode='136' classname='blockchain.Blockchain' start='19' end='27' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'><Message>At Blockchain.java:[lines 19-27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='aafd850c5adde0b4a29dbf15b89bd98a' rank='14' abbrev='SSD' category='MT_CORRECTNESS' priority='2' type='SSD_DO_NOT_USE_INSTANCE_LOCK_ON_SHARED_STATIC_DATA' instanceOccurrenceMax='0'><ShortMessage>Instance level lock was used on a shared static data</ShortMessage><LongMessage>Static field "id" is modified by an instance level synchronized method.</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='false' classname='blockchain.Blockchain' signature='(Lblockchain/Block;J)V' name='addBlock' primary='true'><SourceLine endBytecode='219' classname='blockchain.Blockchain' start='100' end='115' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method blockchain.Blockchain.addBlock(Block, long)</Message></Method><String value='id'><Message>Value id</Message></String><String value='synchronized method'><Message>Value synchronized method</Message></String><SourceLine endBytecode='24' classname='blockchain.Blockchain' start='102' end='102' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='24' primary='true'><Message>At Blockchain.java:[line 102]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='16db94bbbf332bfbaba6fa43fd3f499c' rank='15' abbrev='ST' category='STYLE' priority='1' type='ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD' instanceOccurrenceMax='0'><ShortMessage>Write to static field from instance method</ShortMessage><LongMessage>Write to static field blockchain.Blockchain.id from instance method new blockchain.Blockchain()</LongMessage><Class classname='blockchain.Blockchain' primary='true'><SourceLine classname='blockchain.Blockchain' start='19' end='185' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>At Blockchain.java:[lines 19-185]</Message></SourceLine><Message>In class blockchain.Blockchain</Message></Class><Method isStatic='false' classname='blockchain.Blockchain' signature='()V' name='&lt;init&gt;' primary='true'><SourceLine endBytecode='136' classname='blockchain.Blockchain' start='19' end='27' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='0'></SourceLine><Message>In method new blockchain.Blockchain()</Message></Method><Field isStatic='true' classname='blockchain.Blockchain' signature='I' name='id' primary='true'><SourceLine classname='blockchain.Blockchain' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java'><Message>In Blockchain.java</Message></SourceLine><Message>Field blockchain.Blockchain.id</Message></Field><SourceLine endBytecode='5' classname='blockchain.Blockchain' start='20' end='20' sourcepath='blockchain/Blockchain.java' sourcefile='Blockchain.java' startBytecode='5' primary='true'><Message>At Blockchain.java:[line 20]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='dd759be91068ec4dcf6df92b1d223dd1' rank='16' abbrev='CT' category='BAD_PRACTICE' priority='2' type='CT_CONSTRUCTOR_THROW' instanceOccurrenceMax='0'><ShortMessage>Be wary of letting constructors throw exceptions.</ShortMessage><LongMessage>Exception thrown in class blockchain.Client at new blockchain.Client(String) will leave the constructor. The object under construction remains partially initialized and may be vulnerable to Finalizer attacks.</LongMessage><Class classname='blockchain.Client' primary='true'><SourceLine classname='blockchain.Client' start='9' end='36' sourcepath='blockchain/Client.java' sourcefile='Client.java'><Message>At Client.java:[lines 9-36]</Message></SourceLine><Message>In class blockchain.Client</Message></Class><Method isStatic='false' classname='blockchain.Client' signature='(Ljava/lang/String;)V' name='&lt;init&gt;' primary='true'><SourceLine endBytecode='81' classname='blockchain.Client' start='9' end='12' sourcepath='blockchain/Client.java' sourcefile='Client.java' startBytecode='0'></SourceLine><Message>In method new blockchain.Client(String)</Message></Method><SourceLine endBytecode='11' classname='blockchain.Client' start='11' end='11' sourcepath='blockchain/Client.java' sourcefile='Client.java' startBytecode='11' primary='true'><Message>At Client.java:[line 11]</Message></SourceLine><SourceLine endBytecode='11' classname='blockchain.Client' start='11' end='11' sourcepath='blockchain/Client.java' sourcefile='Client.java' startBytecode='11'><Message>At Client.java:[line 11]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='7df0bd718cdc079999d6e418cbc3ca52' rank='19' abbrev='Dm' category='I18N' priority='1' type='DM_DEFAULT_ENCODING' instanceOccurrenceMax='0'><ShortMessage>Reliance on default encoding</ShortMessage><LongMessage>Found reliance on default encoding in blockchain.Client.sign(long, String): String.getBytes()</LongMessage><Class classname='blockchain.Client' primary='true'><SourceLine classname='blockchain.Client' start='9' end='36' sourcepath='blockchain/Client.java' sourcefile='Client.java'><Message>At Client.java:[lines 9-36]</Message></SourceLine><Message>In class blockchain.Client</Message></Class><Method isStatic='false' classname='blockchain.Client' signature='(JLjava/lang/String;)[B' name='sign' primary='true'><SourceLine endBytecode='123' classname='blockchain.Client' start='24' end='27' sourcepath='blockchain/Client.java' sourcefile='Client.java' startBytecode='0'></SourceLine><Message>In method blockchain.Client.sign(long, String)</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.lang.String' signature='()[B' name='getBytes'><SourceLine endBytecode='56' classname='java.lang.String' start='1836' end='1836' sourcepath='java/lang/String.java' sourcefile='String.java' startBytecode='0'></SourceLine><Message>Called method String.getBytes()</Message></Method><SourceLine endBytecode='28' classname='blockchain.Client' start='26' end='26' sourcepath='blockchain/Client.java' sourcefile='Client.java' startBytecode='28' primary='true'><Message>At Client.java:[line 26]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ae9c1c668938c0acfce6e221750172e4' rank='19' abbrev='Dm' category='I18N' priority='1' type='DM_DEFAULT_ENCODING' instanceOccurrenceMax='0'><ShortMessage>Reliance on default encoding</ShortMessage><LongMessage>Found reliance on default encoding in blockchain.Message.isValid(): String.getBytes()</LongMessage><Class classname='blockchain.Message' primary='true'><SourceLine classname='blockchain.Message' start='13' end='49' sourcepath='blockchain/Message.java' sourcefile='Message.java'><Message>At Message.java:[lines 13-49]</Message></SourceLine><Message>In class blockchain.Message</Message></Class><Method isStatic='false' classname='blockchain.Message' signature='()Z' name='isValid' primary='true'><SourceLine endBytecode='147' classname='blockchain.Message' start='23' end='28' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='0'></SourceLine><Message>In method blockchain.Message.isValid()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.lang.String' signature='()[B' name='getBytes'><SourceLine endBytecode='56' classname='java.lang.String' start='1836' end='1836' sourcepath='java/lang/String.java' sourcefile='String.java' startBytecode='0'></SourceLine><Message>Called method String.getBytes()</Message></Method><SourceLine endBytecode='28' classname='blockchain.Message' start='25' end='25' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='28' primary='true'><Message>At Message.java:[line 25]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='a1c86e798cccac5f56701b8ff04ea294' cweid='374' rank='18' abbrev='EI' category='MALICIOUS_CODE' priority='2' type='EI_EXPOSE_REP' instanceOccurrenceMax='0'><ShortMessage>May expose internal representation by returning reference to mutable object</ShortMessage><LongMessage>blockchain.Message.getSignature() may expose internal representation by returning Message.signature</LongMessage><Class classname='blockchain.Message' primary='true'><SourceLine classname='blockchain.Message' start='13' end='49' sourcepath='blockchain/Message.java' sourcefile='Message.java'><Message>At Message.java:[lines 13-49]</Message></SourceLine><Message>In class blockchain.Message</Message></Class><Method isStatic='false' classname='blockchain.Message' signature='()[B' name='getSignature' primary='true'><SourceLine endBytecode='46' classname='blockchain.Message' start='49' end='49' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='0'></SourceLine><Message>In method blockchain.Message.getSignature()</Message></Method><Field isStatic='false' classname='blockchain.Message' signature='[B' name='signature' primary='true'><SourceLine classname='blockchain.Message' sourcepath='blockchain/Message.java' sourcefile='Message.java'><Message>In Message.java</Message></SourceLine><Message>Field blockchain.Message.signature</Message></Field><SourceLine endBytecode='4' classname='blockchain.Message' start='49' end='49' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='4' primary='true'><Message>At Message.java:[line 49]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='880e7d00bcb656d98332ab72e0f38261' cweid='374' rank='18' abbrev='EI2' category='MALICIOUS_CODE' priority='2' type='EI_EXPOSE_REP2' instanceOccurrenceMax='0'><ShortMessage>May expose internal representation by incorporating reference to mutable object</ShortMessage><LongMessage>new blockchain.Message(long, String, String, PublicKey, byte[]) may expose internal representation by storing an externally mutable object into Message.signature</LongMessage><Class classname='blockchain.Message' primary='true'><SourceLine classname='blockchain.Message' start='13' end='49' sourcepath='blockchain/Message.java' sourcefile='Message.java'><Message>At Message.java:[lines 13-49]</Message></SourceLine><Message>In class blockchain.Message</Message></Class><Method isStatic='false' classname='blockchain.Message' signature='(JLjava/lang/String;Ljava/lang/String;Ljava/security/PublicKey;[B)V' name='&lt;init&gt;' primary='true'><SourceLine endBytecode='148' classname='blockchain.Message' start='13' end='19' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='0'></SourceLine><Message>In method new blockchain.Message(long, String, String, PublicKey, byte[])</Message></Method><Field isStatic='false' classname='blockchain.Message' signature='[B' name='signature' primary='true'><SourceLine classname='blockchain.Message' sourcepath='blockchain/Message.java' sourcefile='Message.java'><Message>In Message.java</Message></SourceLine><Message>Field blockchain.Message.signature</Message></Field><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='29' name='signature' register='6'><Message>Local variable named signature</Message></LocalVariable><SourceLine endBytecode='29' classname='blockchain.Message' start='18' end='18' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='29' primary='true'><Message>At Message.java:[line 18]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='5459c49543a0b603cba0d1232e9a4f2e' cweid='396' rank='17' abbrev='REC' category='STYLE' priority='2' type='REC_CATCH_EXCEPTION' instanceOccurrenceMax='0'><ShortMessage>Exception is caught when Exception is not thrown</ShortMessage><LongMessage>Exception is caught when Exception is not thrown in blockchain.Message.isValid()</LongMessage><Class classname='blockchain.Message' primary='true'><SourceLine classname='blockchain.Message' start='13' end='49' sourcepath='blockchain/Message.java' sourcefile='Message.java'><Message>At Message.java:[lines 13-49]</Message></SourceLine><Message>In class blockchain.Message</Message></Class><Method isStatic='false' classname='blockchain.Message' signature='()Z' name='isValid' primary='true'><SourceLine endBytecode='147' classname='blockchain.Message' start='23' end='28' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='0'></SourceLine><Message>In method blockchain.Message.isValid()</Message></Method><SourceLine endBytecode='43' classname='blockchain.Message' start='27' end='27' sourcepath='blockchain/Message.java' sourcefile='Message.java' startBytecode='43' primary='true'><Message>At Message.java:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='982158f78ea6a957f7604060ee32baf0' cweid='440' rank='14' abbrev='DMI' category='BAD_PRACTICE' priority='1' type='DMI_RANDOM_USED_ONLY_ONCE' instanceOccurrenceMax='0'><ShortMessage>Random object created and used only once</ShortMessage><LongMessage>Random object created and used only once in blockchain.MessageGenerator.run()</LongMessage><Class classname='blockchain.MessageGenerator' primary='true'><SourceLine classname='blockchain.MessageGenerator' start='7' end='58' sourcepath='blockchain/MessageGenerator.java' sourcefile='MessageGenerator.java'><Message>At MessageGenerator.java:[lines 7-58]</Message></SourceLine><Message>In class blockchain.MessageGenerator</Message></Class><Method isStatic='false' classname='blockchain.MessageGenerator' signature='()V' name='run' primary='true'><SourceLine endBytecode='377' classname='blockchain.MessageGenerator' start='42' end='58' sourcepath='blockchain/MessageGenerator.java' sourcefile='MessageGenerator.java' startBytecode='0'></SourceLine><Message>In method blockchain.MessageGenerator.run()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.util.Random' signature='(I)I' name='nextInt' classAnnotationNames='jdk.internal.util.random.RandomSupport$RandomGeneratorProperties'><SourceLine endBytecode='212' classname='java.util.Random' start='556' end='568' sourcepath='java/util/Random.java' sourcefile='Random.java' startBytecode='0'></SourceLine><Message>Called method java.util.Random.nextInt(int)</Message></Method><SourceLine endBytecode='42' classname='blockchain.MessageGenerator' start='46' end='46' sourcepath='blockchain/MessageGenerator.java' sourcefile='MessageGenerator.java' startBytecode='42' primary='true'><Message>At MessageGenerator.java:[line 46]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='a0ca7a18ff0b345f769b9e21bfb5e646' cweid='440' rank='14' abbrev='DMI' category='BAD_PRACTICE' priority='1' type='DMI_RANDOM_USED_ONLY_ONCE' instanceOccurrenceMax='0'><ShortMessage>Random object created and used only once</ShortMessage><LongMessage>Random object created and used only once in blockchain.TransactionGenerator.run()</LongMessage><Class classname='blockchain.TransactionGenerator' primary='true'><SourceLine classname='blockchain.TransactionGenerator' start='9' end='43' sourcepath='blockchain/TransactionGenerator.java' sourcefile='TransactionGenerator.java'><Message>At TransactionGenerator.java:[lines 9-43]</Message></SourceLine><Message>In class blockchain.TransactionGenerator</Message></Class><Method isStatic='false' classname='blockchain.TransactionGenerator' signature='()V' name='run' primary='true'><SourceLine endBytecode='310' classname='blockchain.TransactionGenerator' start='27' end='43' sourcepath='blockchain/TransactionGenerator.java' sourcefile='TransactionGenerator.java' startBytecode='0'></SourceLine><Message>In method blockchain.TransactionGenerator.run()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.util.Random' signature='(I)I' name='nextInt' classAnnotationNames='jdk.internal.util.random.RandomSupport$RandomGeneratorProperties'><SourceLine endBytecode='212' classname='java.util.Random' start='556' end='568' sourcepath='java/util/Random.java' sourcefile='Random.java' startBytecode='0'></SourceLine><Message>Called method java.util.Random.nextInt(int)</Message></Method><SourceLine endBytecode='38' classname='blockchain.TransactionGenerator' start='31' end='31' sourcepath='blockchain/TransactionGenerator.java' sourcefile='TransactionGenerator.java' startBytecode='38' primary='true'><Message>At TransactionGenerator.java:[line 31]</Message></SourceLine><SourceLine role='SOURCE_LINE_ANOTHER_INSTANCE' endBytecode='64' classname='blockchain.TransactionGenerator' start='32' end='32' sourcepath='blockchain/TransactionGenerator.java' sourcefile='TransactionGenerator.java' startBytecode='64'><Message>Another occurrence at TransactionGenerator.java:[line 32]</Message></SourceLine><SourceLine role='SOURCE_LINE_ANOTHER_INSTANCE' endBytecode='79' classname='blockchain.TransactionGenerator' start='33' end='33' sourcepath='blockchain/TransactionGenerator.java' sourcefile='TransactionGenerator.java' startBytecode='79'><Message>Another occurrence at TransactionGenerator.java:[line 33]</Message></SourceLine></BugInstance><BugCategory category='BAD_PRACTICE'><Description>Bad practice</Description></BugCategory><BugCategory category='MALICIOUS_CODE'><Description>Malicious code vulnerability</Description></BugCategory><BugCategory category='CORRECTNESS'><Description>Correctness</Description></BugCategory><BugCategory category='STYLE'><Description>Dodgy code</Description></BugCategory><BugCategory category='MT_CORRECTNESS'><Description>Multithreaded correctness</Description></BugCategory><BugCategory category='I18N'><Description>Internationalization</Description></BugCategory><BugPattern cweid='374' abbrev='EI2' category='MALICIOUS_CODE' type='EI_EXPOSE_REP2'><ShortDescription>May expose internal representation by incorporating reference to mutable object</ShortDescription><Details>

  &lt;p&gt; This code stores a reference to an externally mutable object into the
  internal representation of the object.&amp;nbsp;
   If instances
   are accessed by untrusted code, and unchecked changes to
   the mutable object would compromise security or other
   important properties, you will need to do something different.
  Storing a copy of the object is better approach in many situations.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='NP' category='CORRECTNESS' type='NP_UNWRITTEN_FIELD'><ShortDescription>Read of unwritten field</ShortDescription><Details>

  &lt;p&gt; The program is dereferencing a field that does not seem to ever have a non-null value written to it.
Unless the field is initialized via some mechanism not seen by the analysis,
dereferencing this value will generate a null pointer exception.
&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='543' abbrev='LI' category='MT_CORRECTNESS' type='LI_LAZY_INIT_STATIC'><ShortDescription>Incorrect lazy initialization of static field</ShortDescription><Details>

&lt;p&gt; This method contains an unsynchronized lazy initialization of a non-volatile static field.
Because the compiler or processor may reorder instructions,
threads are not guaranteed to see a completely initialized object,
&lt;em&gt;if the method can be called by multiple threads&lt;/em&gt;.
You can make the field volatile to correct the problem.
For more information, see the
&lt;a href="http://www.cs.umd.edu/~pugh/java/memoryModel/"&gt;Java Memory Model web site&lt;/a&gt;.
&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='396' abbrev='REC' category='STYLE' type='REC_CATCH_EXCEPTION'><ShortDescription>Exception is caught when Exception is not thrown</ShortDescription><Details>
  
  &lt;p&gt;
  This method uses a try-catch block that catches Exception objects, but Exception is not
  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to
  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception
  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,
  masking potential bugs.
  &lt;/p&gt;
  &lt;p&gt;A better approach is to either explicitly catch the specific exceptions that are thrown,
  or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try {
    ...
} catch (RuntimeException e) {
    throw e;
} catch (Exception e) {
    ... deal with all non-runtime exceptions ...
}
&lt;/code&gt;&lt;/pre&gt;
  
     </Details></BugPattern><BugPattern abbrev='MS' category='MALICIOUS_CODE' type='MS_EXPOSE_REP'><ShortDescription>Public static method may expose internal representation by returning a mutable object or array</ShortDescription><Details>

  &lt;p&gt; A public static method returns a reference to a mutable object or
   an array that is part of the static state of the class.
   Any code that calls this method can freely modify
   the underlying array.
   One fix is to return a copy of the array.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='MS' category='MALICIOUS_CODE' type='MS_PKGPROTECT'><ShortDescription>Field should be package protected</ShortDescription><Details>

  &lt;p&gt; A mutable static field could be changed by malicious code or
   by accident.
   The field could be made package protected to avoid
   this vulnerability.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='CT' category='BAD_PRACTICE' type='CT_CONSTRUCTOR_THROW'><ShortDescription>Be wary of letting constructors throw exceptions.</ShortDescription><Details>
      
            &lt;p&gt;Classes that throw exceptions in their constructors are vulnerable to Finalizer attacks&lt;/p&gt;

            &lt;p&gt;A finalizer attack can be prevented, by declaring the class final, using an empty finalizer declared as final, or by a clever use of a private constructor.&lt;/p&gt;

            &lt;p&gt;See &lt;a href="https://wiki.sei.cmu.edu/confluence/display/java/OBJ11-J.+Be+wary+of+letting+constructors+throw+exceptions"&gt;&lt;code&gt;SEI CERT Rule OBJ-11&lt;/code&gt;&lt;/a&gt;
            for more information.
            &lt;/p&gt;
            
    </Details></BugPattern><BugPattern abbrev='SING' category='CORRECTNESS' type='SING_SINGLETON_GETTER_NOT_SYNCHRONIZED'><ShortDescription>Instance-getter method of class using singleton design pattern is not synchronized.</ShortDescription><Details>
      
        &lt;p&gt;
        Instance-getter method of class using singleton design pattern is not synchronized. When this method is invoked by two or more threads simultaneously,
        multiple instantiation of a singleton class becomes possible.&lt;br&gt;&lt;br&gt;

        &lt;a href="https://wiki.sei.cmu.edu/confluence/display/java/MSC07-J.+Prevent+multiple+instantiations+of+singleton+objects"&gt;SEI CERT MSC07-J&lt;/a&gt; rule
        &lt;/p&gt;
    </Details></BugPattern><BugPattern abbrev='ST' category='STYLE' type='ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD'><ShortDescription>Write to static field from instance method</ShortDescription><Details>

  &lt;p&gt; This instance method writes to a static field. This is tricky to get
correct if multiple instances are being manipulated,
and generally bad practice.
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='AT' category='MT_CORRECTNESS' type='AT_STALE_THREAD_WRITE_OF_PRIMITIVE'><ShortDescription>This write of this shared primitive variable may not be visible to other threads</ShortDescription><Details>
      
        &lt;p&gt;
          &lt;a href="https://wiki.sei.cmu.edu/confluence/display/java/VNA00-J.+Ensure+visibility+when+accessing+shared+primitive+variables"&gt;SEI CERT rule VNA00-J&lt;/a&gt;
          describes that reading a shared primitive variable in one thread may not yield the value of the most recent write to the variable from another thread.
          Consequently, the thread may observe a stale value of the shared variable.
        &lt;/p&gt;
        &lt;p&gt;
          To fix it, declare the variable volatile, change the type of the field to the corresponding atomic type from &lt;code&gt;java.lang.concurrent.atomic&lt;/code&gt; or correctly synchronize the code.
          Declaring the variable volatile may not be enough in some cases: e.g. when the variable is assigned a value which depends on the current value or on the result of nonatomic compound operations.
          This guarantees that 64-bit primitive long and double variables are accessed atomically.
        &lt;/p&gt;
     
    </Details></BugPattern><BugPattern cweid='374' abbrev='EI' category='MALICIOUS_CODE' type='EI_EXPOSE_REP'><ShortDescription>May expose internal representation by returning reference to mutable object</ShortDescription><Details>

  &lt;p&gt; Returning a reference to a mutable object value stored in one of the object's fields
  exposes the internal representation of the object.&amp;nbsp;
   If instances
   are accessed by untrusted code, and unchecked changes to
   the mutable object would compromise security or other
   important properties, you will need to do something different.
  Returning a new copy of the object is better approach in many situations.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='DMI' category='BAD_PRACTICE' type='DMI_RANDOM_USED_ONLY_ONCE'><ShortDescription>Random object created and used only once</ShortDescription><Details>

&lt;p&gt; This code creates a java.util.Random object, uses it to generate one random number, and then discards
the Random object. This produces mediocre quality random numbers and is inefficient.
If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number
is required invoke a method on the existing Random object to obtain it.
&lt;/p&gt;

&lt;p&gt;If it is important that the generated Random numbers not be guessable, you &lt;em&gt;must&lt;/em&gt; not create a new Random for each random
number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead
(and avoid allocating a new SecureRandom for each random number needed).
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='UwF' category='CORRECTNESS' type='UWF_UNWRITTEN_FIELD'><ShortDescription>Unwritten field</ShortDescription><Details>

  &lt;p&gt; This field is never written.&amp;nbsp; All reads of it will return the default
value. Check for errors (should it have been initialized?), or remove it if it is useless.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='AT' category='MT_CORRECTNESS' type='AT_NONATOMIC_OPERATIONS_ON_SHARED_VARIABLE'><ShortDescription>Operation on shared variable is not atomic</ShortDescription><Details>
      
        &lt;p&gt;
          This write of a variable shared between functions depends on the current value of the variable (either because it's a compound operation - e.g. +=, ++ - or it simply depends on the current value), as such it consists of more than one discrete operation.
          These operations are not atomic in themselves and need further synchronization.
          See &lt;a href="https://wiki.sei.cmu.edu/confluence/display/java/VNA02-J.+Ensure+that+compound+operations+on+shared+variables+are+atomic"&gt;SEI CERT rule VNA02-J&lt;/a&gt;.

          Simply declaring a variable volatile fails to guarantee the atomicity of compound operations on the variable,
          but synchronizing the writes on top of declaring the variable volatile for read operations is sufficient.
        &lt;p&gt;
          To solve this issue, synchronize compound operations and other write operations depending on the previous value,
          use read-write locks, or declare the shared variable with an atomic type.
        &lt;/p&gt;
     
    </Details></BugPattern><BugPattern abbrev='AT' category='MT_CORRECTNESS' type='AT_NONATOMIC_64BIT_PRIMITIVE'><ShortDescription>This write of this 64-bit primitive variable may not atomic</ShortDescription><Details>
      
        &lt;p&gt;
          The long and the double are 64-bit primitive types, and depending on the Java Virtual Machine implementation assigning a value to them can be treated as two separate 32-bit writes, and as such it's not atomic.
          See &lt;a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7"&gt;JSL 17.7. Non-Atomic Treatment of double and long&lt;/a&gt;.
          See SEI CERT rule &lt;a href="https://wiki.sei.cmu.edu/confluence/display/java/VNA05-J.+Ensure+atomicity+when+reading+and+writing+64-bit+values"&gt;VNA05-J. Ensure atomicity when reading and writing 64-bit values&lt;/a&gt; for more info.

          This bug can be ignored in platforms which guarantee that 64-bit long and double type read and write operations are atomic.
        &lt;/p&gt;
        &lt;p&gt;
          To fix it, declare the variable volatile, change the type of the field to the corresponding atomic type from &lt;code&gt;java.lang.concurrent.atomic&lt;/code&gt; or correctly synchronize the code.
          Declaring the variable volatile may not be enough in some cases: e.g. when the variable is assigned a value which depends on the current value or on the result of nonatomic compound operations.
        &lt;/p&gt;
     
    </Details></BugPattern><BugPattern abbrev='SING' category='CORRECTNESS' type='SING_SINGLETON_HAS_NONPRIVATE_CONSTRUCTOR'><ShortDescription>Class using singleton design pattern has non-private constructor.</ShortDescription><Details>
      
        &lt;p&gt;
        This class is using singleton design pattern and has non-private constructor (please note that a default constructor might exist which is not private). Given that, it is possible to create a copy of the object, thus violating the singleton pattern.&lt;br&gt;
        The easier solution would be making the constructor private.&lt;br&gt;&lt;br&gt;

        &lt;a href="https://wiki.sei.cmu.edu/confluence/display/java/MSC07-J.+Prevent+multiple+instantiations+of+singleton+objects"&gt;SEI CERT MSC07-J&lt;/a&gt; rule
        &lt;/p&gt;
    </Details></BugPattern><BugPattern abbrev='Dm' category='I18N' type='DM_DEFAULT_ENCODING'><ShortDescription>Reliance on default encoding</ShortDescription><Details>

&lt;p&gt; Found a call to a method which will perform a byte to String (or String to byte) conversion,
and will assume that the default platform encoding is suitable. This will cause the application
behavior to vary between platforms. Use an alternative API and specify a charset name or Charset
object explicitly.&lt;/p&gt;

      </Details></BugPattern><BugPattern abbrev='IS' category='MT_CORRECTNESS' type='IS2_INCONSISTENT_SYNC'><ShortDescription>Inconsistent synchronization</ShortDescription><Details>

  &lt;p&gt; The fields of this class appear to be accessed inconsistently with respect
  to synchronization.&amp;nbsp; This bug report indicates that the bug pattern detector
  judged that
  &lt;/p&gt;
  &lt;ul&gt;
  &lt;li&gt; The class contains a mix of locked and unlocked accesses,&lt;/li&gt;
  &lt;li&gt; The class is &lt;b&gt;not&lt;/b&gt; annotated as javax.annotation.concurrent.NotThreadSafe,&lt;/li&gt;
  &lt;li&gt; At least one locked access was performed by one of the class's own methods, and&lt;/li&gt;
  &lt;li&gt; The number of unsynchronized field accesses (reads and writes) was no more than
       one third of all accesses, with writes being weighed twice as high as reads&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt; A typical bug matching this bug pattern is forgetting to synchronize
  one of the methods in a class that is intended to be thread-safe.&lt;/p&gt;

  &lt;p&gt; You can select the nodes labeled "Unsynchronized access" to show the
  code locations where the detector believed that a field was accessed
  without synchronization.&lt;/p&gt;

  &lt;p&gt; Note that there are various sources of inaccuracy in this detector;
  for example, the detector cannot statically detect all situations in which
  a lock is held.&amp;nbsp; Also, even when the detector is accurate in
  distinguishing locked vs. unlocked accesses, the code in question may still
  be correct.&lt;/p&gt;


    </Details></BugPattern><BugPattern abbrev='SSD' category='MT_CORRECTNESS' type='SSD_DO_NOT_USE_INSTANCE_LOCK_ON_SHARED_STATIC_DATA'><ShortDescription>Instance level lock was used on a shared static data</ShortDescription><Details>
      &lt;p&gt;
        If the lock or the synchronized method is not static, that modifies the static field,
        that could leave the shared static data unprotected against concurrent access.
        This could occur in two ways, if a synchronization method uses a non-static lock object,
        or a synchronized method is declared as non-static. Both ways are ineffective.
        Best solution is to use a private static final lock object to secure the shared static data.&lt;/p&gt;
      &lt;p&gt;
      See SEI CERT rule
      &lt;a href="https://wiki.sei.cmu.edu/confluence/display/java/LCK06-J.+Do+not+use+an+instance+lock+to+protect+shared+static+data"&gt;
      LCK06-J. Do not use an instance lock to protect shared static data&lt;/a&gt;.
      &lt;/p&gt;
    </Details></BugPattern><BugCode abbrev='ST'><Description>Misuse of static fields</Description></BugCode><BugCode cweid='440' abbrev='DMI'><Description>Dubious method invocation</Description></BugCode><BugCode cweid='476' abbrev='NP'><Description>Null pointer dereference</Description></BugCode><BugCode abbrev='EI'><Description>Method returning array may expose internal representation</Description></BugCode><BugCode abbrev='UwF'><Description>Unwritten field</Description></BugCode><BugCode abbrev='SSD'><Description>Do not use an instance lock to protect shared static data</Description></BugCode><BugCode cweid='493' abbrev='MS'><Description>Mutable static field</Description></BugCode><BugCode abbrev='SING'><Description>Singleton problems</Description></BugCode><BugCode abbrev='Dm'><Description>Dubious method used</Description></BugCode><BugCode cweid='366' abbrev='IS'><Description>Inconsistent synchronization</Description></BugCode><BugCode abbrev='EI2'><Description>Storing reference to mutable object</Description></BugCode><BugCode abbrev='CT'><Description>Constructor throws</Description></BugCode><BugCode abbrev='REC'><Description>RuntimeException capture</Description></BugCode><BugCode abbrev='AT'><Description>Possible atomicity violation</Description></BugCode><BugCode abbrev='LI'><Description>Unsynchronized Lazy Initialization</Description></BugCode><Errors missingClasses='0' errors='0'></Errors><FindBugsSummary num_packages='1' total_classes='9' priority_1='5' priority_2='20' total_size='362' clock_seconds='1.22' referenced_classes='65' vm_version='21.0.6+8-b631.39' total_bugs='25' java_version='21.0.6' gc_seconds='0.01' alloc_mbytes='512.00' cpu_seconds='3.14' peak_mbytes='216.76' timestamp='Tue, 29 Apr 2025 16:26:50 +0400'><FileStats path='blockchain/Block.java' size='76' bugHash='8fe769b9c5d536a3ffe87be2f18de52a' bugCount='7'></FileStats><FileStats path='blockchain/Blockchain.java' size='101' bugHash='d931f49968b85a4e8dea9f457a7a92e2' bugCount='10'></FileStats><FileStats path='blockchain/BlockchainSimulation.java' size='52' bugCount='0'></FileStats><FileStats path='blockchain/Client.java' size='23' bugHash='f2bef86df4421374845d7ff54bdea6a0' bugCount='2'></FileStats><FileStats path='blockchain/Main.java' size='7' bugCount='0'></FileStats><FileStats path='blockchain/Message.java' size='31' bugHash='031913b82d013ad3428d02bd797bfc7d' bugCount='4'></FileStats><FileStats path='blockchain/MessageGenerator.java' size='28' bugHash='abe9fe18768a19967f162529df497370' bugCount='1'></FileStats><FileStats path='blockchain/StringUtil.java' size='14' bugCount='0'></FileStats><FileStats path='blockchain/TransactionGenerator.java' size='30' bugHash='332722ed9d11817d3ae908b81064e9a4' bugCount='1'></FileStats><PackageStats package='blockchain' priority_1='5' total_bugs='25' priority_2='20' total_size='362' total_types='9'><ClassStats bugs='7' size='76' priority_2='7' interface='false' sourceFile='Block.java' class='blockchain.Block'></ClassStats><ClassStats bugs='10' size='101' priority_1='1' priority_2='9' interface='false' sourceFile='Blockchain.java' class='blockchain.Blockchain'></ClassStats><ClassStats bugs='0' size='52' interface='false' sourceFile='BlockchainSimulation.java' class='blockchain.BlockchainSimulation'></ClassStats><ClassStats bugs='2' size='23' priority_1='1' priority_2='1' interface='false' sourceFile='Client.java' class='blockchain.Client'></ClassStats><ClassStats bugs='0' size='7' interface='false' sourceFile='Main.java' class='blockchain.Main'></ClassStats><ClassStats bugs='4' size='31' priority_1='1' priority_2='3' interface='false' sourceFile='Message.java' class='blockchain.Message'></ClassStats><ClassStats bugs='1' size='28' priority_1='1' interface='false' sourceFile='MessageGenerator.java' class='blockchain.MessageGenerator'></ClassStats><ClassStats bugs='0' size='14' interface='false' sourceFile='StringUtil.java' class='blockchain.StringUtil'></ClassStats><ClassStats bugs='1' size='30' priority_1='1' interface='false' sourceFile='TransactionGenerator.java' class='blockchain.TransactionGenerator'></ClassStats></PackageStats><FindBugsProfile><ClassProfile avgMicrosecondsPerInvocation='298' totalMilliseconds='220' name='edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine' maxMicrosecondsPerInvocation='7864' standardDeviationMicrosecondsPerInvocation='699' invocations='738'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='93' totalMilliseconds='68' name='edu.umd.cs.findbugs.classfile.engine.ClassDataAnalysisEngine' maxMicrosecondsPerInvocation='5875' standardDeviationMicrosecondsPerInvocation='252' invocations='740'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='948' totalMilliseconds='61' name='edu.umd.cs.findbugs.detect.FieldItemSummary' maxMicrosecondsPerInvocation='7644' standardDeviationMicrosecondsPerInvocation='1407' invocations='65'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='732' totalMilliseconds='47' name='edu.umd.cs.findbugs.detect.FindNoSideEffectMethods' maxMicrosecondsPerInvocation='3845' standardDeviationMicrosecondsPerInvocation='1008' invocations='65'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='165' totalMilliseconds='38' name='edu.umd.cs.findbugs.OpcodeStack$JumpInfoFactory' maxMicrosecondsPerInvocation='1670' standardDeviationMicrosecondsPerInvocation='205' invocations='231'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='262' totalMilliseconds='28' name='edu.umd.cs.findbugs.classfile.engine.bcel.JavaClassAnalysisEngine' maxMicrosecondsPerInvocation='7919' standardDeviationMicrosecondsPerInvocation='800' invocations='110'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='477' totalMilliseconds='28' name='edu.umd.cs.findbugs.classfile.engine.bcel.TypeDataflowFactory' maxMicrosecondsPerInvocation='5439' standardDeviationMicrosecondsPerInvocation='1035' invocations='60'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='2964' totalMilliseconds='26' name='edu.umd.cs.findbugs.detect.FindReturnRef' maxMicrosecondsPerInvocation='20991' standardDeviationMicrosecondsPerInvocation='6426' invocations='9'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='415' totalMilliseconds='25' name='edu.umd.cs.findbugs.classfile.engine.bcel.ValueNumberDataflowFactory' maxMicrosecondsPerInvocation='3543' standardDeviationMicrosecondsPerInvocation='748' invocations='61'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='34' totalMilliseconds='23' name='edu.umd.cs.findbugs.util.TopologicalSort' maxMicrosecondsPerInvocation='596' standardDeviationMicrosecondsPerInvocation='71' invocations='688'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='346' totalMilliseconds='22' name='edu.umd.cs.findbugs.detect.NoteDirectlyRelevantTypeQualifiers' maxMicrosecondsPerInvocation='3295' standardDeviationMicrosecondsPerInvocation='535' invocations='65'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='359' totalMilliseconds='20' name='edu.umd.cs.findbugs.classfile.engine.bcel.IsNullValueDataflowFactory' maxMicrosecondsPerInvocation='4126' standardDeviationMicrosecondsPerInvocation='637' invocations='56'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='347' totalMilliseconds='19' name='edu.umd.cs.findbugs.ba.npe.NullDerefAndRedundantComparisonFinder' maxMicrosecondsPerInvocation='2967' standardDeviationMicrosecondsPerInvocation='493' invocations='56'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='279' totalMilliseconds='18' name='edu.umd.cs.findbugs.detect.FunctionsThatMightBeMistakenForProcedures' maxMicrosecondsPerInvocation='2543' standardDeviationMicrosecondsPerInvocation='450' invocations='65'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='314' totalMilliseconds='17' name='edu.umd.cs.findbugs.classfile.engine.bcel.UnconditionalValueDerefDataflowFactory' maxMicrosecondsPerInvocation='4306' standardDeviationMicrosecondsPerInvocation='617' invocations='56'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='296' totalMilliseconds='16' name='edu.umd.cs.findbugs.classfile.engine.bcel.MethodGenFactory' maxMicrosecondsPerInvocation='11890' standardDeviationMicrosecondsPerInvocation='1568' invocations='56'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='233' totalMilliseconds='15' name='edu.umd.cs.findbugs.detect.CalledMethods' maxMicrosecondsPerInvocation='1827' standardDeviationMicrosecondsPerInvocation='347' invocations='65'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='270' totalMilliseconds='15' name='edu.umd.cs.findbugs.classfile.engine.bcel.CFGFactory' maxMicrosecondsPerInvocation='3185' standardDeviationMicrosecondsPerInvocation='566' invocations='56'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='228' totalMilliseconds='14' name='edu.umd.cs.findbugs.detect.BuildObligationPolicyDatabase' maxMicrosecondsPerInvocation='1547' standardDeviationMicrosecondsPerInvocation='321' invocations='65'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='201' totalMilliseconds='13' name='edu.umd.cs.findbugs.detect.OverridingEqualsNotSymmetrical' maxMicrosecondsPerInvocation='4848' standardDeviationMicrosecondsPerInvocation='607' invocations='65'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='325' totalMilliseconds='11' name='edu.umd.cs.findbugs.detect.FindRefComparison$SpecialTypeAnalysis' maxMicrosecondsPerInvocation='2866' standardDeviationMicrosecondsPerInvocation='505' invocations='36'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='176' totalMilliseconds='11' name='edu.umd.cs.findbugs.detect.BuildStringPassthruGraph' maxMicrosecondsPerInvocation='2984' standardDeviationMicrosecondsPerInvocation='403' invocations='65'></ClassProfile></FindBugsProfile></FindBugsSummary><ClassFeatures></ClassFeatures><History></History></BugCollection>